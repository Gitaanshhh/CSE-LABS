$date
	Wed Aug 21 16:00:10 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Decoder4to16_tb $end
$var wire 16 ! Y [15:0] $end
$var reg 1 " E $end
$var reg 4 # W [3:0] $end
$scope module mu $end
$var wire 1 " E $end
$var wire 4 $ W [3:0] $end
$var wire 16 % Y [15:0] $end
$var wire 4 & T [3:0] $end
$scope module d1 $end
$var wire 1 " E $end
$var wire 2 ' W [1:0] $end
$var reg 4 ( Y [3:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ) k [31:0] $end
$upscope $end
$upscope $end
$scope module d2 $end
$var wire 1 * E $end
$var wire 2 + W [1:0] $end
$var reg 4 , Y [3:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 - k [31:0] $end
$upscope $end
$upscope $end
$scope module d3 $end
$var wire 1 . E $end
$var wire 2 / W [1:0] $end
$var reg 4 0 Y [3:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 1 k [31:0] $end
$upscope $end
$upscope $end
$scope module d4 $end
$var wire 1 2 E $end
$var wire 2 3 W [1:0] $end
$var reg 4 4 Y [3:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 5 k [31:0] $end
$upscope $end
$upscope $end
$scope module d5 $end
$var wire 1 6 E $end
$var wire 2 7 W [1:0] $end
$var reg 4 8 Y [3:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 9 k [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 : i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 :
b100 9
b1 8
b0 7
06
b100 5
b1 4
b0 3
02
b100 1
b1 0
b0 /
0.
b100 -
b0 ,
b0 +
1*
b100 )
b1 (
b0 '
b1 &
b1000100010000 %
b0 $
b0 #
0"
b1000100010000 !
$end
#10
b100 -
b10 0
b100 1
b10 4
b100 5
b10001000100000 !
b10001000100000 %
b10 8
b100 9
b1 +
b1 /
b1 3
b1 7
b1 #
b1 $
b1 :
#20
b100 -
b100 0
b100 1
b100 4
b100 5
b100010001000000 !
b100010001000000 %
b100 8
b100 9
b10 +
b10 /
b10 3
b10 7
b10 #
b10 $
b10 :
#30
b100 -
b1000 0
b100 1
b1000 4
b100 5
b1000100010000000 !
b1000100010000000 %
b1000 8
b100 9
b11 +
b11 /
b11 3
b11 7
b11 #
b11 $
b11 :
#40
b1 ,
1.
0*
b10 &
b10 (
b100 )
b100 -
b0 0
b100 1
b1 4
b100 5
b1000100000001 !
b1000100000001 %
b1 8
b100 9
b1 '
b0 +
b0 /
b0 3
b0 7
b100 #
b100 $
b100 :
#50
b10 ,
b100 -
b100 1
b10 4
b100 5
b10001000000010 !
b10001000000010 %
b10 8
b100 9
b1 +
b1 /
b1 3
b1 7
b101 #
b101 $
b101 :
#60
b100 ,
b100 -
b100 1
b100 4
b100 5
b100010000000100 !
b100010000000100 %
b100 8
b100 9
b10 +
b10 /
b10 3
b10 7
b110 #
b110 $
b110 :
#70
b1000 ,
b100 -
b100 1
b1000 4
b100 5
b1000100000001000 !
b1000100000001000 %
b1000 8
b100 9
b11 +
b11 /
b11 3
b11 7
b111 #
b111 $
b111 :
#80
b1 0
12
0.
b100 &
b100 (
b100 )
b1 ,
b100 -
b100 1
b0 4
b100 5
b1000000010001 !
b1000000010001 %
b1 8
b100 9
b10 '
b0 +
b0 /
b0 3
b0 7
b1000 #
b1000 $
b1000 :
#90
b10 ,
b100 -
b10 0
b100 1
b100 5
b10000000100010 !
b10000000100010 %
b10 8
b100 9
b1 +
b1 /
b1 3
b1 7
b1001 #
b1001 $
b1001 :
#100
b100 ,
b100 -
b100 0
b100 1
b100 5
b100000001000100 !
b100000001000100 %
b100 8
b100 9
b10 +
b10 /
b10 3
b10 7
b1010 #
b1010 $
b1010 :
#110
b1000 ,
b100 -
b1000 0
b100 1
b100 5
b1000000010001000 !
b1000000010001000 %
b1000 8
b100 9
b11 +
b11 /
b11 3
b11 7
b1011 #
b1011 $
b1011 :
#120
b1 4
16
02
b1000 &
b1000 (
b100 )
b1 ,
b100 -
b1 0
b100 1
b100 5
b100010001 !
b100010001 %
b0 8
b100 9
b11 '
b0 +
b0 /
b0 3
b0 7
b1100 #
b1100 $
b1100 :
#130
b10 ,
b100 -
b10 0
b100 1
b1000100010 !
b1000100010 %
b10 4
b100 5
b100 9
b1 +
b1 /
b1 3
b1 7
b1101 #
b1101 $
b1101 :
#140
b100 ,
b100 -
b100 0
b100 1
b10001000100 !
b10001000100 %
b100 4
b100 5
b100 9
b10 +
b10 /
b10 3
b10 7
b1110 #
b1110 $
b1110 :
#150
b1000 ,
b100 -
b1000 0
b100 1
b100010001000 !
b100010001000 %
b1000 4
b100 5
b100 9
b11 +
b11 /
b11 3
b11 7
b1111 #
b1111 $
b1111 :
#160
b10000 :
